[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Solitary Crow’s Lab",
    "section": "",
    "text": "In development!\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "Blog/about.html",
    "href": "Blog/about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "Blog/posts/code-latext/index.html",
    "href": "Blog/posts/code-latext/index.html",
    "title": "Testing Latex and Code",
    "section": "",
    "text": "\\[x = 1\\] \\[\\frac{1}{x} = 2\\]"
  },
  {
    "objectID": "Blog/posts/code-latext/index.html#latex-in-markdown",
    "href": "Blog/posts/code-latext/index.html#latex-in-markdown",
    "title": "Testing Latex and Code",
    "section": "",
    "text": "\\[x = 1\\] \\[\\frac{1}{x} = 2\\]"
  },
  {
    "objectID": "Blog/posts/code-latext/index.html#code-in-markdown",
    "href": "Blog/posts/code-latext/index.html#code-in-markdown",
    "title": "Testing Latex and Code",
    "section": "Code in markdown",
    "text": "Code in markdown\ndef sum(seq):\n    accu = 0\n    for i in seq:\n        accu += i\n    return accu\n#define TENSOR_CHECK(expression) {      \\\n    tensorError_t status = expression;  \\\n    if (status != tensorSuccess) {      \\\n        std::cerr &lt;&lt; \"[ERROR] \"         \\\n        &lt;&lt; tensorGetErrorString(status) \\\n        &lt;&lt; \" in file \"                  \\\n        &lt;&lt; __FILE__                     \\\n        &lt;&lt; \" at line \"                  \\\n        &lt;&lt; __LINE__                     \\\n        &lt;&lt; std::endl; }                 \\\n}"
  },
  {
    "objectID": "Blog/posts/welcome/index.html",
    "href": "Blog/posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "Blog/index.html",
    "href": "Blog/index.html",
    "title": "Solitary Crow’s Blog",
    "section": "",
    "text": "C++ native high performance computing using PSTL and SYCL\n\n\n\nc++\n\nhpc\n\nsycl\n\ntriton\n\nspirv\n\npstl\n\ncuda\n\n\n\n\n\n\n\n\n\nAug 10, 2025\n\n\nsolitary_crow\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\nnews\n\ncode\n\nanalysis\n\n\n\n\n\n\n\n\n\nAug 6, 2025\n\n\nsolitary_crow\n\n\n\n\n\n\n\n\n\n\n\n\nTesting Latex and Code\n\n\n\nmath\n\nc++\n\ncuda\n\n\n\n\n\n\n\n\n\nAug 6, 2025\n\n\nsolitary_crow\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nAug 3, 2025\n\n\nsolitary_crow\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Blog/posts/post-with-code/index.html",
    "href": "Blog/posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "Blog/posts/sycl-pstl/index.html",
    "href": "Blog/posts/sycl-pstl/index.html",
    "title": "C++ native high performance computing using PSTL and SYCL",
    "section": "",
    "text": "!This is incomplete"
  },
  {
    "objectID": "Blog/posts/sycl-pstl/index.html#introduction",
    "href": "Blog/posts/sycl-pstl/index.html#introduction",
    "title": "C++ native high performance computing using PSTL and SYCL",
    "section": "Introduction",
    "text": "Introduction\nC++ STL (aka Standard Template Library) allows engineers to build high performance systems with less friction using the STL as the building block. STL provides users with data structures and algorithms needed to construct complex systems. PSTL is the parallel version of the STL first introduced to the C++ standard in C++17 with the inclusion of function overloads for different execution policies (which we will discuss later). Why PSTL? Because modern hardware is parallel, from multicore CPUs to different accelerators such as GPUs, NPUs. To exploit these systems one must introduce parallelism support to their design and PSTL makes it easy with little to no code changes, even more stdpar supporting compilers even allow device offloading to different accelerators as well from single source."
  },
  {
    "objectID": "Blog/posts/sycl-pstl/index.html#host-vs-device",
    "href": "Blog/posts/sycl-pstl/index.html#host-vs-device",
    "title": "C++ native high performance computing using PSTL and SYCL",
    "section": "Host vs Device",
    "text": "Host vs Device\nPSTL in compilers supporting stdpar such as nvc++, dpc++, and adaptivecpp allows users to offload standard C++ code to accelerators such as GPUs as well opening a whole new era of hetrogranous computing, but first we need to understand the terminologies used in HPC and heterogeneous computing.\nIn heterogeneous programming terminology, the platform you develop on is called the host (such as your CPU) and the external device connected to the host is your device (such as the GPU, but it can be any device). You write your kernel (the core unit of computation) and compile it on the host and offload it to the device together with your data (which has to be moved from host memory to device memory). Since we will look into SYCL as well as stdpar and device offloading with PSTL it’s important to understand these concepts."
  },
  {
    "objectID": "Blog/posts/sycl-pstl/index.html#a-small-introduction-to-parallel-computing-and-c11-stdthread",
    "href": "Blog/posts/sycl-pstl/index.html#a-small-introduction-to-parallel-computing-and-c11-stdthread",
    "title": "C++ native high performance computing using PSTL and SYCL",
    "section": "A small introduction to parallel computing and C++11 std::thread",
    "text": "A small introduction to parallel computing and C++11 std::thread"
  },
  {
    "objectID": "Blog/posts/sycl-pstl/index.html#c17-pstl",
    "href": "Blog/posts/sycl-pstl/index.html#c17-pstl",
    "title": "C++ native high performance computing using PSTL and SYCL",
    "section": "C++17 PSTL",
    "text": "C++17 PSTL\n\n#include &lt;algorithms&gt;\n#include &lt;execution&gt;\n#include &lt;vector&gt;\n\nint main(void) {\n    std::vector&lt;float&gt; vec(100);\n    // overloaded execution policy\n    std::sort(std::execution::par, vec.begin(), vec.end());\n    return 0;\n}"
  }
]